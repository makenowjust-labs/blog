import { valueToEstree } from "estree-util-value-to-estree";
import { excerpt } from "hast-util-excerpt";
import { toEstree } from "hast-util-to-estree";
import { toText } from "hast-util-to-text";
import { filter } from "unist-util-filter";

export default function rehypeMdxExcerpt() {
  return (tree) => {
    // Remove elements generated by footnotes.
    const fragment = filter(
      excerpt(tree, { comment: "read more" }),
      (node) =>
        !(
          node.type === "element" &&
          node.tagName === "sup" &&
          node.children.length === 1 &&
          node.children[0].type === "element" &&
          node.children[0].tagName === "a"
        ),
    );

    if (!fragment) {
      return;
    }

    const estree = toEstree(fragment).body[1];

    // Remove elements generated by `rehype-katex`.
    const filtered = filter(
      fragment,
      (node) =>
        !(node.type === "element" && node.tagName === "span" && node.properties?.className?.[0] === "katex-mathml"),
    );
    const text = toText(filtered);

    const totalText = toText(tree);
    const readingTime = totalText.length / 500;

    // Insert the following statements into the head of the `tree`.
    //
    // ```
    // export const Excerpt = () => ...;
    // export const excerpt = "...":
    // ```
    tree.children.unshift({
      type: "mdxjsEsm",
      value: "",
      data: {
        estree: {
          type: "Program",
          sourceType: "module",
          body: [
            {
              type: "ExportNamedDeclaration",
              specifiers: [],
              declaration: {
                type: "VariableDeclaration",
                kind: "const",
                declarations: [
                  {
                    type: "VariableDeclarator",
                    id: { type: "Identifier", name: "Excerpt" },
                    init: {
                      type: "ArrowFunctionExpression",
                      expression: true,
                      generator: false,
                      async: false,
                      params: [],
                      body: estree,
                    },
                  },
                ],
              },
            },
            {
              type: "ExportNamedDeclaration",
              specifiers: [],
              declaration: {
                type: "VariableDeclaration",
                kind: "const",
                declarations: [
                  {
                    type: "VariableDeclarator",
                    id: { type: "Identifier", name: "excerpt" },
                    init: valueToEstree(text),
                  },
                ],
              },
            },
            {
              type: "ExportNamedDeclaration",
              specifiers: [],
              declaration: {
                type: "VariableDeclaration",
                kind: "const",
                declarations: [
                  {
                    type: "VariableDeclarator",
                    id: { type: "Identifier", name: "readingTime" },
                    init: valueToEstree(readingTime),
                  },
                ],
              },
            },
          ],
        },
      },
    });
  };
}
